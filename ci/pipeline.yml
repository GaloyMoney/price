#@ load("@ytt:data", "data")

#@ def pipeline_image():
#@   return data.values.docker_registry + "/nodejs-concourse"
#@ end

#@ def galoy_image():
#@   return data.values.docker_registry + "/price"
#@ end

#@ def galoy_history_image():
#@   return data.values.docker_registry + "/price-history"
#@ end

#@ def galoy_history_migrate_image():
#@   return data.values.docker_registry + "/price-history-migrate"
#@ end

#@ def task_image_config():
type: registry-image
source:
  username: #@ data.values.docker_registry_user
  password: #@ data.values.docker_registry_password
  repository: #@ pipeline_image()
#@ end

#@ def build_task(dockerfile_path):
task: build
config:
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: gcr.io/kaniko-project/executor
      tag: debug
  inputs:
  - name: repo
  outputs:
  - name: image
  run:
    path: /kaniko/executor
    args:
      - #@ "--dockerfile=" + dockerfile_path
      - --context=repo
      - --use-new-run
      - --single-snapshot
      - --cache=false
      - --no-push
      - --tar-path=image/image.tar
#@ end

groups:
- name: price
  jobs:
  - build-edge-image
  - build-history-edge-image
  - build-history-migrate-edge-image
  - bump-image-in-chart

jobs:
- name: build-edge-image
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: pipeline-tasks }
  - task: prepare-docker-build
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
  - #@ build_task("realtime/Dockerfile")
  - put: edge-image
    params:
      image: image/image.tar

- name: build-history-edge-image
  serial: true
  plan:
  - in_parallel:
    - { get: repo, trigger: true }
    - { get: pipeline-tasks }
  - task: prepare-docker-build
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: repo
      outputs:
      - name: repo
      run:
        path: pipeline-tasks/ci/tasks/prepare-docker-build.sh
  - #@ build_task("history/Dockerfile")
  - put: history-edge-image
    params:
      image: image/image.tar

- name: build-history-migrate-edge-image
  serial: true
  plan:
  - { get: repo, trigger: true }
  - #@ build_task("history/Dockerfile-migrate")
  - put: history-migrate-edge-image
    params:
      image: image/image.tar

- name: bump-image-in-chart
  plan:
  - in_parallel:
    - get: edge-image
      trigger: true
      passed: [build-edge-image]
      params: { skip_download: true }
    - get: history-edge-image
      trigger: true
      passed: [build-history-edge-image]
      params: { skip_download: true }
    - get: history-migrate-edge-image
      trigger: true
      passed: [build-history-migrate-edge-image]
      params: { skip_download: true }
    - get: repo
      trigger: true
      passed:
      - build-edge-image
      - build-history-edge-image
      - build-history-migrate-edge-image
    - get: charts-repo
      params: { skip_download: true }
    - get: pipeline-tasks
  - task: bump-image-digest-in-values
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: repo
      - name: edge-image
      - name: history-edge-image
      - name: history-migrate-edge-image
      - name: pipeline-tasks
      - name: charts-repo
      outputs:
      - name: charts-repo
      params:
        BRANCH: #@ data.values.git_charts_branch
      run:
        path: pipeline-tasks/ci/tasks/bump-image-digest.sh
  - put: charts-repo-bot-branch
    params:
      repository: charts-repo
      force: true
  - task: open-charts-pr
    config:
      platform: linux
      image_resource: #@ task_image_config()
      inputs:
      - name: pipeline-tasks
      - name: edge-image
      - name: history-edge-image
      - name: history-migrate-edge-image
      - name: charts-repo
      params:
        GH_APP_ID: #@ data.values.github_app_id
        GH_APP_PRIVATE_KEY: #@ data.values.github_app_private_key
        BRANCH: #@ data.values.git_charts_branch
        BOT_BRANCH: #@ data.values.git_charts_bot_branch
      run:
        path: pipeline-tasks/ci/tasks/open-charts-pr.sh

resources:
- name: repo
  type: git
  source:
    ignore_paths: ["ci/*[^md]"]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key

- name: charts-repo-bot-branch
  type: git
  source:
    uri: #@ data.values.git_charts_uri
    branch: #@ data.values.git_charts_bot_branch
    private_key: #@ data.values.github_private_key

- name: charts-repo
  type: git
  source:
    uri: #@ data.values.git_charts_uri
    branch: #@ data.values.git_charts_branch
    private_key: #@ data.values.github_private_key

- name: edge-image
  type: registry-image
  source:
    tag: edge
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ galoy_image()

- name: history-edge-image
  type: registry-image
  source:
    tag: edge
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ galoy_history_image()

- name: history-migrate-edge-image
  type: registry-image
  source:
    tag: edge
    username: #@ data.values.docker_registry_user
    password: #@ data.values.docker_registry_password
    repository: #@ galoy_history_migrate_image()

- name: pipeline-tasks
  type: git
  source:
    paths: [ci/tasks/*, Makefile]
    uri: #@ data.values.git_uri
    branch: #@ data.values.git_branch
    private_key: #@ data.values.github_private_key
